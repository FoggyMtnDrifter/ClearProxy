name: ESLint

on:
  pull_request:
    branches: [main, develop]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  eslint:
    name: Run ESLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create temporary script to modify ESLint config
        run: |
          cat > modify-eslint-config.mjs << 'EOF'
          import fs from 'fs';
          import path from 'path';

          // Read the original config
          const originalConfigPath = path.resolve('./eslint.config.mjs');
          const configContent = fs.readFileSync(originalConfigPath, 'utf8');

          // Modify the content to disable type checking for CI
          const modifiedContent = configContent
            // Comment out project references which trigger type checking
            .replace(/project: ['"]\.\/tsconfig\.eslint\.json['"],?/g, '// project: \'./tsconfig.eslint.json\', // Disabled in CI to reduce memory usage')
            // Add a comment at the top to indicate this is a modified version
            .replace('import js from', '// Modified for CI to reduce memory usage\nimport js from');

          // Write the modified config to a temporary file
          const tempConfigPath = path.resolve('./eslint.ci-temp.mjs');
          fs.writeFileSync(tempConfigPath, modifiedContent, 'utf8');

          console.log('Created temporary ESLint config with type checking disabled');
          EOF

      - name: Prepare CI config
        run: node modify-eslint-config.mjs

      - name: Find changed files
        id: changed_files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_COMMIT=${{ github.event.pull_request.base.sha }}
            echo "Using PR base commit: $BASE_COMMIT"
          else
            # For manual runs on branch or other cases, use a reasonable default
            BASE_COMMIT=$(git merge-base origin/main HEAD)
            echo "Using merge-base with main: $BASE_COMMIT"
          fi

          # Get the list of changed files (only .js, .ts, .svelte)
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT $BASE_COMMIT HEAD | grep -E '\.(js|ts|svelte)$' || true)

          # Replace newlines with spaces in the file list
          CHANGED_FILES_SPACE_SEPARATED=$(echo "$CHANGED_FILES" | tr '\n' ' ')

          # Save to output
          echo "file_list=$CHANGED_FILES_SPACE_SEPARATED" >> $GITHUB_OUTPUT

          # Count of files
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "Found $FILE_COUNT changed files to lint"

      - name: Run ESLint in tiny batches
        if: steps.changed_files.outputs.file_list != ''
        run: |
          # Convert space-separated list to array
          read -ra FILES <<< "${{ steps.changed_files.outputs.file_list }}"

          # Set batch size - using much smaller batches
          BATCH_SIZE=5

          # Total files count
          TOTAL_FILES=${#FILES[@]}
          echo "Total files to lint: $TOTAL_FILES"

          # Track if any batch fails
          LINT_FAILED=0

          # Process files in batches
          for ((i=0; i<TOTAL_FILES; i+=BATCH_SIZE)); do
            echo "Processing batch $(($i / BATCH_SIZE + 1))..."
            
            # Get the batch of files
            BATCH=()
            for ((j=i; j<i+BATCH_SIZE && j<TOTAL_FILES; j++)); do
              BATCH+=("${FILES[$j]}")
            done
            
            # Run ESLint on this batch
            echo "Linting ${#BATCH[@]} files..."
            echo "Files: ${BATCH[@]}"
            
            # Use the temporarily modified ESLint config with reduced memory usage
            NODE_OPTIONS="--max-old-space-size=2048" npx eslint --config ./eslint.ci-temp.mjs --max-warnings=0 ${BATCH[@]} || {
              echo "ESLint failed on batch $(($i / BATCH_SIZE + 1))"
              LINT_FAILED=1
            }
          done

          # Fail the job if any batch failed
          if [ $LINT_FAILED -eq 1 ]; then
            echo "ESLint found issues in one or more files"
            exit 1
          fi

      - name: Clean up temporary files
        if: always()
        run: rm -f ./eslint.ci-temp.mjs ./modify-eslint-config.mjs
